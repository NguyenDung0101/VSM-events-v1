import { EventsService } from './events.service';
import { CreateEventDto } from './dto/create-event.dto';
import { UpdateEventDto } from 'src/events/dto/update-event.dto';
export declare class EventsController {
    private readonly eventsService;
    constructor(eventsService: EventsService);
    create(createEventDto: CreateEventDto, req: any): Promise<{
        id: string;
        name: string;
        description: string;
        content: string;
        date: Date;
        location: string;
        image: string | null;
        maxParticipants: number;
        currentParticipants: number;
        category: import(".prisma/client").$Enums.EventCategory;
        status: import(".prisma/client").$Enums.EventStatus;
        distance: string | null;
        registrationFee: number | null;
        requirements: string | null;
        published: boolean;
        featured: boolean;
        registrationDeadline: Date | null;
        organizer: string | null;
        createdAt: Date;
        updatedAt: Date;
        authorId: string;
    }>;
    findAll(): Promise<{
        id: string;
        name: string;
        description: string;
        content: string;
        date: Date;
        location: string;
        image: string | null;
        maxParticipants: number;
        currentParticipants: number;
        category: import(".prisma/client").$Enums.EventCategory;
        status: import(".prisma/client").$Enums.EventStatus;
        distance: string | null;
        registrationFee: number | null;
        requirements: string | null;
        published: boolean;
        featured: boolean;
        registrationDeadline: Date | null;
        organizer: string | null;
        createdAt: Date;
        updatedAt: Date;
        authorId: string;
    }[]>;
    findOne(id: string): Promise<{
        registrations: {
            id: string;
            status: import(".prisma/client").$Enums.RegistrationStatus;
            updatedAt: Date;
            fullName: string;
            email: string;
            phone: string;
            emergencyContact: string;
            emergencyPhone: string | null;
            medicalConditions: string | null;
            experience: import(".prisma/client").$Enums.ExperienceLevel;
            registeredAt: Date;
            eventId: string;
            userId: string;
        }[];
    } & {
        id: string;
        name: string;
        description: string;
        content: string;
        date: Date;
        location: string;
        image: string | null;
        maxParticipants: number;
        currentParticipants: number;
        category: import(".prisma/client").$Enums.EventCategory;
        status: import(".prisma/client").$Enums.EventStatus;
        distance: string | null;
        registrationFee: number | null;
        requirements: string | null;
        published: boolean;
        featured: boolean;
        registrationDeadline: Date | null;
        organizer: string | null;
        createdAt: Date;
        updatedAt: Date;
        authorId: string;
    }>;
    update(id: string, updateEventDto: UpdateEventDto, req: any): Promise<{
        id: string;
        name: string;
        description: string;
        content: string;
        date: Date;
        location: string;
        image: string | null;
        maxParticipants: number;
        currentParticipants: number;
        category: import(".prisma/client").$Enums.EventCategory;
        status: import(".prisma/client").$Enums.EventStatus;
        distance: string | null;
        registrationFee: number | null;
        requirements: string | null;
        published: boolean;
        featured: boolean;
        registrationDeadline: Date | null;
        organizer: string | null;
        createdAt: Date;
        updatedAt: Date;
        authorId: string;
    }>;
    remove(id: string, req: any): Promise<{
        id: string;
        name: string;
        description: string;
        content: string;
        date: Date;
        location: string;
        image: string | null;
        maxParticipants: number;
        currentParticipants: number;
        category: import(".prisma/client").$Enums.EventCategory;
        status: import(".prisma/client").$Enums.EventStatus;
        distance: string | null;
        registrationFee: number | null;
        requirements: string | null;
        published: boolean;
        featured: boolean;
        registrationDeadline: Date | null;
        organizer: string | null;
        createdAt: Date;
        updatedAt: Date;
        authorId: string;
    }>;
}
